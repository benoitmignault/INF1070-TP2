#!/bin/bash

# Déclaration des functions

function F1(){
    echo 'I like bash programming'
}


function greeting() {

    str="Hello, $name"
    # le return qu'on connait est représenté ici, par un ou plusieurs echo via la sortie standard
    echo $str
    echo $str
    echo $str
}
#val=$(greeting)


# Par défaut sans l'option -n, on affiche les 10 fichiers, les plus récents
# Option -n doit avoir un chiffre valide positivement
# Option -f doit avoir le nom du fichier qui le suit comme argument

# On doit valider que le fichier existe avec le chemin fourni en paramètre








# Début de l'exécution du script



# Si le nombre d'arguments est en bas de 2 ou supérieur à 5, Exit 1
if [ $# -lt 2 ] || [ $# -gt 5 ]; then

    echo "Veuiller fournir entre 2 et 5 arguments !" >&2
    exit 1    
else
    # La liste des options valides
    choix_option_valid="^-[fnc]$"

    # Les variables de contrôles contre les erreurs
    fichier_valide=false
    option_fichier=false    
    option_nbligne=false
    option_charHex=false
    option_invalide=false

    # Les variables utilisables 
    nom_fichier=""
    nb_lignes=10 # Par défaut c'est 10

    # Utilisation de la boucle while et shift pour itérer sur les arguments
    while [ "$#" -gt 0 ]; do

        # Récupère l'information de l'argument $1, avant le shift
        option_actuelle="$1"        
        
        shift

        # Récupère l'information de l'argument $1, après le shift, pour vérification
        prochaine_option="$1"

        # On vérifi si l'option est invalide
        if [[ ! "$option_actuelle" =~ $choix_option_valid ]]; then

            echo "L'option saisie « $option_actuelle » est invalide..." >&2
            exit 4              
        else
            # Maintenant, on doit trouver notre option qui a été validée
            case "$option_actuelle" in
                "-f")             
                    option_fichier=true
                    # On trouve un fichier invalide ou qui n'existe pas
                    if [ ! -f "$prochaine_option" ]; then

                        echo "Le fichier saisi « $prochaine_option » est non valide ou introuvable..." >&2
                        exit 2
                    fi
                    ;;

                "-n")
                    option_nbligne=true 




                    ;;

                "-c")
                    option_charHex=true 
                    ;;
            esac
        fi
        



        
    done

    



    # utiliser un While avec un shift au lieu d'une boucle for

    #On va structurer notre gestion argument avec Switch/Case, pour une meilleure lisibilité
    case "$#" in
        2)              
            # Vérifier si l'argument correspond à une option valide
            if [[ "$1" = "-f" ]]; then                
                # Avons nous un fichier régulier  
                if [ -f "$2" ];  then

                    cat $2  | head -n 10

                else
                    echo "Le fichier $2 est un fichier non valide ou introuvable" >&2
                    exit 2
                fi
            else
                echo "Aucun fichier n'a été fourni" >&2
                exit 2
            fi
            ;;            
        3)  
            # Scénario avec l'option -c et -f et son fichier, seulement
            echo "Nous avons : $1, $2, $3" 
            # Valeur de retour pour l'option -n et le nombre entier N.
            # -f recently-used.xbel -n , code erreur 3 , il manque le nombre avec option 
            # Valeur de retour pour une option inconnue.



            ;;
        4)  
            # Scénario avec l'option -f et l'option -n et inversement
            

            # Vérifier les arguments impaires sont des options valides
            if [[ "$1" =~ $choix_option_valid ]] && [[ "$3" =~ $choix_option_valid ]]; then

                echo "Les options sont valides !"


            else
                echo "L'une des deux ou les deux l'options ne sont valides." >&2
                exit 4
            fi



            ;;
        5)
            # Tous les scénario sont possible
            echo "Nous avons : $1, $2, $3, $4, $5"





            ;;
    esac
fi